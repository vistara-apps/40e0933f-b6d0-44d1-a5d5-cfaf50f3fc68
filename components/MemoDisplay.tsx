'use client';

import { useState } from 'react';
import { FileText, Eye, Download, Share2, AlertTriangle, CheckCircle } from 'lucide-react';
import { StatusIndicator } from './StatusIndicator';
import { cn, formatDate, calculateReadingTime } from '../lib/utils';
import type { MemoDisplayProps } from '../lib/types';

export function MemoDisplay({
  memo,
  variant = 'preview',
  onRequestReview
}: MemoDisplayProps) {
  const [isExpanded, setIsExpanded] = useState(variant === 'final');

  const readingTime = calculateReadingTime(memo.generatedContent);

  // Map memo status to StatusIndicator compatible status
  const getStatusIndicatorStatus = (memoStatus: string) => {
    switch (memoStatus) {
      case 'draft':
        return 'pending';
      case 'generated':
        return 'pending';
      case 'under_review':
        return 'in_progress';
      case 'approved':
        return 'approved';
      case 'rejected':
        return 'rejected';
      default:
        return 'pending';
    }
  };

  return (
    <div className="card">
      {/* Header */}
      <div className="p-4 border-b border-border">
        <div className="flex items-start justify-between">
          <div className="flex items-start gap-3">
            <div className="w-10 h-10 bg-accent rounded-lg flex items-center justify-center">
              <FileText className="w-5 h-5 text-white" />
            </div>
            <div>
              <h3 className="font-semibold">Legal Memorandum</h3>
              <div className="flex items-center gap-2 mt-1">
                <StatusIndicator status={getStatusIndicatorStatus(memo.status)} />
                <span className="text-xs text-gray-600">
                  {formatDate(memo.createdAt)}
                </span>
                <span className="text-xs text-gray-600">
                  â€¢ {readingTime} min read
                </span>
              </div>
            </div>
          </div>
          
          {/* Actions */}
          <div className="flex items-center gap-2">
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="p-2 text-gray-600 hover:text-gray-900 transition-colors duration-200"
            >
              <Eye className="w-4 h-4" />
            </button>
            <button className="p-2 text-gray-600 hover:text-gray-900 transition-colors duration-200">
              <Download className="w-4 h-4" />
            </button>
            <button className="p-2 text-gray-600 hover:text-gray-900 transition-colors duration-200">
              <Share2 className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* Metadata */}
        <div className="mt-3 flex flex-wrap gap-2">
          <span className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">
            {memo.jurisdiction}
          </span>
          <span className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">
            {memo.legalArea}
          </span>
          {memo.citations.length > 0 && (
            <span className="px-2 py-1 bg-green-100 text-green-700 text-xs rounded">
              {memo.citations.length} citations
            </span>
          )}
        </div>
      </div>

      {/* Content */}
      {isExpanded && (
        <div className="p-4">
          {/* AI Disclaimer */}
          <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4 flex items-start gap-2">
            <AlertTriangle className="w-4 h-4 text-yellow-600 mt-0.5 flex-shrink-0" />
            <div className="text-sm text-yellow-800">
              <strong>AI-Generated Content:</strong> This memo was generated by AI and should be reviewed by a qualified attorney before making any legal decisions.
            </div>
          </div>

          {/* Memo Content */}
          <div className="prose prose-sm max-w-none">
            <div className="whitespace-pre-wrap text-text-primary">
              {memo.generatedContent}
            </div>
          </div>

          {/* Citations */}
          {memo.citations.length > 0 && (
            <div className="mt-6 pt-4 border-t border-border">
              <h4 className="font-medium mb-3">Legal Citations</h4>
              <div className="space-y-2">
                {memo.citations.map((citation, index) => (
                  <div key={index} className="p-3 bg-gray-50 rounded-md">
                    <div className="font-medium text-sm">{citation.title}</div>
                    <div className="text-sm text-gray-600">{citation.source}</div>
                    {citation.url && (
                      <a
                        href={citation.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-primary text-sm hover:underline"
                      >
                        View Source
                      </a>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Footer Actions */}
      <div className="p-4 border-t border-border bg-gray-50">
        {memo.reviewStatus === 'pending' && onRequestReview && (
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-600">
              Get this memo reviewed by a qualified lawyer
            </div>
            <button
              onClick={onRequestReview}
              className="btn-primary"
            >
              Request Review
            </button>
          </div>
        )}

        {memo.reviewStatus === 'completed' && (
          <div className="flex items-center gap-2 text-green-600">
            <CheckCircle className="w-4 h-4" />
            <span className="text-sm font-medium">Reviewed and approved by legal counsel</span>
          </div>
        )}
      </div>
    </div>
  );
}
